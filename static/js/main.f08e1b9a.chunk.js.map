{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","currentTemp","tomorrowTemp","location","handleChange","bind","fetchWeatherData","success","error","generateURL","navigator","geolocation","getCurrentPosition","this","position","setState","Math","round","coords","latitude","toString","longitude","allowed","url","fetch","then","response","status","text","console","log","responseParsed","DOMParser","parseFromString","window","perHour","querySelector","innerHTML","split","weatherData","slice","length","map","value","trim","catch","err","event","key","target","className","type","defaultValue","onKeyPress","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,qICqG5BC,G,8DAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,YAAa,GACbC,aAAc,GACdC,SAAU,IAEzB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,gBACb,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBAVF,E,gEAcjBK,UAAUC,YAAYC,mBAAmBC,KAAKN,QAASM,KAAKL,S,8BAGtDM,GACND,KAAKE,SAAS,CAACZ,SAAUa,KAAKC,MAAMH,EAASI,OAAOC,UAAUC,WAAa,IAAMJ,KAAKC,MAAMH,EAASI,OAAOG,WAAWD,aACvHP,KAAKP,kBAAiB,EAAMQ,EAASI,OAAOC,SAASC,WAAa,IAAMN,EAASI,OAAOG,UAAUD,c,8BAIlGP,KAAKE,SAAS,CAACZ,SAAU,aACzBU,KAAKP,kBAAiB,EAAO,c,kCAGnBgB,EAASnB,GACnB,OAAgB,IAAZmB,EACK,0JAA4JnB,EAE5J,2JAA6JA,I,uCAIvJmB,EAASnB,GAAW,IAAD,OAC9BoB,EAAMV,KAAKJ,YAAYa,EAASnB,GAEpCqB,MAAMD,GACLE,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OAGX,OAAOD,EAASE,OAFhBC,QAAQC,IAAI,YAAcJ,EAASC,WAKtCF,MAAK,SAACG,GACL,IACIG,GADS,IAAIC,WACWC,gBAAgBL,EAAM,mBAClDM,OAAOH,eAAiBA,EACxB,IAAII,EAAUJ,EAAeK,cAAc,8BAA8BC,UAAUC,MAAM,MAErFC,EADiBJ,EAAQK,MAAM,EAAGL,EAAQM,OAAO,GAAGC,KAAI,SAACC,GAAD,OAAWA,EAAMC,UAC5CF,KAAI,SAACC,GAAD,OAAWA,EAAML,MAAM,QAC5D,EAAKvB,SAAS,CACZd,YAAasC,EAAY,GAAG,GAC5BrC,aAAcqC,EAAY,IAAI,QAGjCM,OAAM,SAACC,GACNjB,QAAQC,IAAI,UAAWgB,Q,mCAIdC,GACO,UAAdA,EAAMC,MACRnC,KAAKE,SAAS,CAACZ,SAAU4C,EAAME,OAAON,QACtC9B,KAAKP,kBAAiB,EAAOyC,EAAME,OAAON,U,+BAK5C,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,2BAAOC,KAAK,OACLD,UAAU,gBACVE,aAAcvC,KAAKb,MAAMG,SACzBkD,WAAYxC,KAAKT,eACxB,iDAAwBS,KAAKb,MAAMG,SAAnC,MAEF,0BAAM+C,UAAU,YACd,yBAAKA,UAAU,eACb,mDACErC,KAAKb,MAAMC,aAEf,yBAAKiD,UAAU,eACb,sDACErC,KAAKb,MAAME,oB,GAxFPoD,IAAMC,YCQJC,QACW,cAA7BtB,OAAO/B,SAASsD,UAEe,UAA7BvB,OAAO/B,SAASsD,UAEhBvB,OAAO/B,SAASsD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrD,WACrBA,UAAUsD,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdtB,OAAM,SAAArC,GACLqB,QAAQrB,MAAMA,EAAM4D,c","file":"static/js/main.f08e1b9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentTemp: \"\",\n                   tomorrowTemp: \"\",\n                   location: \"\"}\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.fetchWeatherData = this.fetchWeatherData.bind(this);\n    this.success = this.success.bind(this);\n    this.error = this.error.bind(this);\n    this.generateURL = this.generateURL.bind(this);\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(this.success, this.error);\n  }\n\n  success(position) {\n    this.setState({location: Math.round(position.coords.latitude).toString() + \",\" + Math.round(position.coords.longitude).toString()});\n    this.fetchWeatherData(true, position.coords.latitude.toString() + \",\" + position.coords.longitude.toString());\n  }\n\n  error() {\n    this.setState({location: \"Helsinki\"});\n    this.fetchWeatherData(false, \"Helsinki\");\n  }\n\n  generateURL(allowed, location) {\n    if (allowed === false) {\n      return \"http://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature&storedquery_id=fmi::forecast::hirlam::surface::point::multipointcoverage&place=\" + location;\n    } else {\n      return \"http://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature&storedquery_id=fmi::forecast::hirlam::surface::point::multipointcoverage&latlon=\" + location;\n    }\n  }\n\n  fetchWeatherData(allowed, location) {\n    var url = this.generateURL(allowed, location);\n\n    fetch(url)\n    .then((response) => {\n      if (response.status !== 200) {\n        console.log(\"Problem: \" + response.status);\n      } else {\n        return response.text();\n      }\n    })\n    .then((text) => {\n      var parser = new DOMParser();\n      var responseParsed = parser.parseFromString(text, \"application/xml\");\n      window.responseParsed = responseParsed;\n      var perHour = responseParsed.querySelector(\"doubleOrNilReasonTupleList\").innerHTML.split(\"\\n\");\n      var perHourTrimmed = perHour.slice(1, perHour.length-1).map((value) => value.trim());\n      var weatherData = perHourTrimmed.map((value) => value.split(\" \"));\n      this.setState({\n        currentTemp: weatherData[0][1],\n        tomorrowTemp: weatherData[23][1]\n      });\n    })\n    .catch((err) => {\n      console.log(\"Error: \", err);\n    })\n  }\n\n  handleChange(event) {\n    if (event.key === \"Enter\") {\n      this.setState({location: event.target.value});\n      this.fetchWeatherData(false, event.target.value);\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input type=\"text\" \n                 className=\"LocationInput\" \n                 defaultValue={this.state.location} \n                 onKeyPress={this.handleChange} />\n          <h2>Current location: { this.state.location } </h2>\n        </header>\n        <body className=\"App-body\">\n          <div className=\"Temperature\">\n            <h4>Current Temperature</h4>\n            { this.state.currentTemp }\n          </div>\n          <div className=\"Temperature\">\n            <h4>Tomorrow's Temperature</h4>\n            { this.state.tomorrowTemp }\n          </div>\n        </body>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}